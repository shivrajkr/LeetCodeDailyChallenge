class Solution {
    public int countStudents(int[] students, int[] sandwiches) {

        // TC : O(n) and SC : O(n)
        //where n will be the sandwiches or student length
        // As we are using queue DS. Space complexity is increased to n.

        // Edge cases - check we have 1 student, if yes, check he is asking sandwiches is present or not. Return the result accordingly
        if(students.length == 1)
        {
            return students[0] == sandwiches[0] ? 0 : 1; // If both are same, then all the student got their lunch and they happily eat. else, they have to sacrifies lunch
        }

        // Initialize the queue
        Queue<Integer> queue = new LinkedList<>();
        //Enqueue all the student element in the queue
        for (int value : students) {
            queue.add(value);
        }

        //Iterate each index of sandwiches and when all are picked return true.
        int i=0;
        int consecutiveRotateCount = 0;
        while(i < sandwiches.length)
        {
            int num = queue.peek();
            if(num == sandwiches[i])
            {
                // if both are equal -> means student asking sandwich is available, so we can remove it from the queue
                i++;
                queue.poll();
                consecutiveRotateCount=0;
            }
            else{
                // Student requesting sandwich is not equal to the top of the stack
                // Rotate the student -> Re-add
                int num1 = queue.poll();
                queue.add(num1);
                consecutiveRotateCount++;
                if(consecutiveRotateCount > queue.size())
                {
                    return queue.size();
                }
            }
        }
        return 0;
    }
}

/*
Pseudo code : Use Queue DS to achieve this

1. Initialize the queue DS -> LinkedList
2. Enqueue the student array element one by one in the queue DS
3. check is the first of the queue is similar to the sandwiches
    3a. If yes, Remove it from the queue DS
    3b. Else, remove it and added back to the queue
4. Maintain the consecutiveRotateCount, if its > the size of the queue we can simply return the size of the queue


TC : O(n) -> 
SC : O(n) -> queue DS

 */